2019.07.16
node  express koa
mongodb
项目
vue  Vue2.0  vue.cli2.0  vue.cli3.0
react
微信小程序
语言分为编译型语言与解释型语言
09年五月，正式发布node.js,09年二月
node.js定义：
是一个让JavaScript运行在服务器端的开发平台
node.js的特点：
1，更高的性能
2，node.js不是一种独立的语言，node.js使用JavaScript进行编程，运行在JavaScript引擎上（v8），它自己不用建设在任何服务器软件之上。
html 是超文本标记语言
css 层叠样式表
js  解释型脚本语言
jq  大型的js库，链式调用，读写合一
node.js  是一个让JavaScript运行在服务器端的开发平台
----------------------------->
node.js的特点：单线程，非阻塞i/o,事件驱动
http模块 
-------------------------------> 
cmd，amd区别？
AMD（异步执行） 是 RequireJS 在推广过程中对模块定义的规范化产出。
CMD （异步执行）是 SeaJS 在推广过程中对模块定义的规范化产出。
都是为了 JavaScript 的模块化开发，都能达成浏览器端模块化开发的目的。
AMD是提前执行，CMD时延迟执行
CMD推崇依赖就近,AMD推崇依赖前置 
AMD和CMD是基于浏览器使用并且是异步执行,commonJS是基于服务端同步执行
--------------------------------->
import和require的区别
node编程中最重要的思想就是模块化，import和require都是被模块化所使用。

遵循规范
require 是 AMD规范引入方式
import是es6的一个语法标准，如果要兼容浏览器的话必须转化成es5的语法
调用时间
require是运行时调用，所以require理论上可以运用在代码的任何地方
import是编译时调用，所以必须放在文件开头
本质
require是赋值过程，其实require的结果就是对象、数字、字符串、函数等，再把require的结果赋值给某个变量
import是解构过程，但是目前所有的引擎都还没有实现import，我们在node中使用babel支持ES6，也仅仅是将ES6转码为ES5再执行，
import语法会被转码为require,require / exports ：
遵循 CommonJS/AMD，只能在运行时确定模块的依赖关系及输入/输出的变量，无法进行静态优化。
--------------------------------->
node-v，node --version 查看node版本
favicon.ico
node回车
cls 清屏
---------------------------------->
如何解决中文乱码：
writeHead写入响应头   文本类型 text/html     格式 utf-8或者UTF8
text/plain 文本
fs=file system   文件系统   var fs=require("fs")
readFile 读文件
res.writeHead(200,{"Content-type":"text/html;charset=utf-8"})
----------------------------------------->
在网页中打开 localhost:3000;127.0.0.1:3000
-------------------------->
// 引入http模块
var http=require("http")
// 创建服务器
http.createServer((req,res)=>{
    // req=request 请求，res=response  响应
console.log("hello node")
// 结束响应
res.end("end")
}).listen(3000)
// listen 监听端口
------------------------------>
var oldquery=url.parse(req.url).query
var query=url.parse(req.url,true).query
 url.parse(解析地址栏)url.parse如果第二个参数为true时，则会转换为对象，反之是字符串
 解析 把多段路径进行合并
 var query=url.resolve("http://127.0.0.1:3000","/name/ma")
 // 序列化 参数  对象
 var query=url.format({
  protocol: null,
  slashes: null,
  auth: null,
  host: "http://127.0.0.1",
  port: "3000",
  hostname: null,
  hash: null,
  search: '?name=456',
  query: 'name=456',
  pathname: '/',
  path: '?name=456',
  href: '?name=456'
})
